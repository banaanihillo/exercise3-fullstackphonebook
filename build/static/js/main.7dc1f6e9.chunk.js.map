{"version":3,"sources":["components/Persons.js","components/AddEntry.js","components/Filter.js","services/persons.js","index.js"],"names":["Persons","props","persons","searchTerms","removePerson","filter","person","name","toLowerCase","includes","map","key","id","number","onClick","AddEntry","addPerson","newName","newNumber","handleName","handleNumber","onSubmit","value","onChange","type","Filter","handleSearching","axios","get","personObject","post","delete","personToReplace","put","require","ReactDOM","render","useState","setPersons","setNewName","setNewNumber","setSearchTerms","message","setMessage","useEffect","handlePersons","then","response","data","event","console","log","target","window","confirm","setTimeout","className","preventDefault","some","Math","floor","random","find","catch","error","concat","document","getElementById"],"mappings":"mNAmBeA,EAjBC,SAACC,GAAW,IACjBC,EAAsCD,EAAtCC,QAASC,EAA6BF,EAA7BE,YAAaC,EAAgBH,EAAhBG,aAE7B,OACI,4BACKF,EAAQG,QAAO,SAAAC,GAAM,OACgD,IAAlEA,EAAOC,KAAKC,cAAcC,SAASN,EAAYK,kBACjDE,KAAI,SAAAJ,GAAM,OACR,wBAAIK,IAAOL,EAAOM,IACbN,EAAOC,KADZ,KACoBD,EAAOO,OACvB,4BAAQC,QAAW,kBAAMV,EAAaE,EAAOM,MAA7C,wBCULG,EApBE,SAACd,GAAW,IAClBe,EAA2Df,EAA3De,UAAWC,EAAgDhB,EAAhDgB,QAASC,EAAuCjB,EAAvCiB,UAAWC,EAA4BlB,EAA5BkB,WAAYC,EAAgBnB,EAAhBmB,aAElD,OACI,0BAAMC,SAAYL,GACd,oCACU,2BACFM,MAASL,EACTM,SAAYJ,KAEpB,sCACY,2BACJG,MAASJ,EACTK,SAAYH,KAEpB,4BAAQI,KAAO,UAAf,cCHGC,EAZA,SAACxB,GAAW,IAChBE,EAAgCF,EAAhCE,YAAauB,EAAmBzB,EAAnByB,gBAEpB,OACI,iDACuB,2BACfJ,MAASnB,EACToB,SAAYG,M,gBCUb,EAhBA,WACX,OAAOC,IAAMC,IAHD,iBAkBD,EAZG,SAACC,GACf,OAAOF,IAAMG,KAPD,eAOeD,IAWhB,EARM,SAACjB,GAClB,OAAOe,IAAMI,OAAN,uBAA6BnB,KAOzB,EAJM,SAACiB,EAAcG,GAChC,OAAOL,IAAMM,IAAN,uBAA0BD,EAAgBpB,IAAMiB,ICV3DK,EAAQ,IAkKRC,IAASC,OAAO,mBAhKJ,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACPnC,EADO,KACEoC,EADF,OAEgBD,mBAAS,IAFzB,mBAEPpB,EAFO,KAEEsB,EAFF,OAGoBF,mBAAS,IAH7B,mBAGPnB,EAHO,KAGIsB,EAHJ,OAIwBH,mBAAS,IAJjC,mBAIPlC,EAJO,KAIMsC,EAJN,OAKgBJ,mBAAS,IALzB,mBAKPK,EALO,KAKEC,EALF,KAOdC,qBAAU,WACNC,IAEKC,MAAK,SAAAC,GACFT,EAAWS,EAASC,WAE7B,IAmIH,OACI,6BACI,mDACA,kBAAC,EAAD,CAAQ7C,YAAeA,EAAauB,gBArCpB,SAACuB,GACrBC,QAAQC,IAAIF,EAAMG,OAAO9B,OACzBmB,EAAeQ,EAAMG,OAAO9B,UAoCxB,kBAAC,EAAD,CACIpB,QAAWA,EACXC,YAAeA,EACfC,aApCS,SAACQ,GACdyC,OAAOC,QAAQ,8CACfT,EACkBjC,GACbkC,MAAK,WACFR,EAAWpC,EAAQG,QAAO,SAAAC,GAAM,OAAIA,EAAOM,KAAOA,SAE1D+B,EAAW,wBAAD,OACkB/B,EADlB,yBAGV2C,YAAW,WACPZ,EAAW,QACZ,SAyBH,mBArBQ,SAAC1C,GAAW,IACjByC,EAAWzC,EAAXyC,QACP,OAAgB,OAAZA,EACO,KAIP,yBAAKc,UAAY,WACZd,KAaL,CAASA,QAAWA,IACpB,sDACA,kBAAC,EAAD,CAAU1B,UA1IA,SAACiC,GAEf,GADAA,EAAMQ,kBACDxC,IAAYC,EAKtB,OAJAyB,EAAW,2CACXY,YAAW,WACVZ,EAAW,QACT,KAGJ,GAAIzC,EAAQwD,MAAK,SAAApD,GAAM,OAAIA,EAAOO,SAAWK,KAK5C,OAJAyB,EAAW,GAAD,OAAIzB,EAAJ,6DACVqC,YAAW,WACVZ,EAAW,QACT,KAIJ,IAAMd,EAAe,CACXtB,KAAMU,EACNJ,OAAQK,EACRN,GAAI+C,KAAKC,MAAsB,IAAhBD,KAAKE,WAIxB,KAFiB3D,EAAQwD,MAAK,SAAApD,GAAM,OAAIA,EAAOC,OAASU,MAG7D,GAAIoC,OAAOC,QAAP,UACYrC,EADZ,sFAEoDC,EAFpD,MAGO,CACE,IAAMc,EAAkB9B,EAAQ4D,MAAK,SAAAxD,GAAM,OACvCA,EAAOC,OAASU,KAEpB4B,EACkBhB,EAAcG,GAC3Bc,MAAK,SAAAC,GACFT,EAAWpC,EAAQQ,KAAI,SAAAJ,GAAM,OACzBA,EAAOM,KAAOoB,EAAgBpB,GAAKN,EAASyC,EAASC,YAG5De,OAAM,SAAAC,GACHd,QAAQC,IAAIa,GACZrB,EAAW,cAAD,OACQ1B,EADR,0JAKVsC,YAAW,WACPZ,EAAW,QACZ,QAEXA,EAAW,wBAAD,OACkB1B,EADlB,iBACkCC,EADlC,MAGVqC,YAAW,WACPZ,EAAW,QACZ,KACHJ,EAAW,IACXC,EAAa,UAGjBK,EACehB,GACViB,MAAK,SAAAC,GACFT,EAAWpC,EAAQ+D,OAAOlB,EAASC,OAClDL,EAAW,mCAAD,OAC0B1B,EAD1B,aACsCC,EADtC,MAGVqC,YAAW,WACVZ,EAAW,QACT,KACHJ,EAAW,IACXC,EAAa,OAEbuB,OAAM,SAAAC,GACNrB,EAAW,iCAAD,OACwBqB,EAAMjB,SAASC,KAAKgB,QAEtDT,YAAW,WACVZ,EAAW,QACT,SA2DsC1B,QAAWA,EAASC,UAAaA,EAC/DC,WAvDa,SAAC8B,GACtBC,QAAQC,IAAIF,EAAMG,OAAO9B,OACzBiB,EAAWU,EAAMG,OAAO9B,QAqDgBF,aAlDjB,SAAC6B,GACxBC,QAAQC,IAAIF,EAAMG,OAAO9B,OACzBkB,EAAaS,EAAMG,OAAO9B,aAqDlB,MAAS4C,SAASC,eAAe,W","file":"static/js/main.7dc1f6e9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Persons = (props) => {\r\n    const {persons, searchTerms, removePerson} = props;\r\n\r\n    return (\r\n        <ul>\r\n            {persons.filter(person =>\r\n                person.name.toLowerCase().includes(searchTerms.toLowerCase()) === true\r\n            ).map(person =>\r\n                <li key = {person.id}>\r\n                    {person.name}: {person.number}\r\n                    <button onClick = {() => removePerson(person.id)}> Remove entry </button>\r\n                </li>\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Persons;","import React from 'react';\r\n\r\nconst AddEntry = (props) => {\r\n    const {addPerson, newName, newNumber, handleName, handleNumber} = props;\r\n    \r\n    return (\r\n        <form onSubmit = {addPerson} >\r\n            <p>\r\n                Name: <input\r\n                    value = {newName}\r\n                    onChange = {handleName} />\r\n            </p>\r\n            <p>\r\n                Number: <input\r\n                    value = {newNumber}\r\n                    onChange = {handleNumber} />\r\n            </p>\r\n            <button type = \"submit\" > Submit </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddEntry;","import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n    const {searchTerms, handleSearching} = props;\r\n\r\n    return (\r\n        <p>\r\n            Search for a name: <input\r\n                value = {searchTerms}\r\n                onChange = {handleSearching} />\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default Filter;","import axios from \"axios\";\r\nconst address = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n    return axios.get(address)\r\n}\r\n\r\nconst addPerson = (personObject) => {\r\n    return axios.post(address, personObject)\r\n}\r\n\r\nconst removePerson = (id) => {\r\n    return axios.delete(`/api/persons/${id}`)\r\n}\r\n\r\nconst updateNumber = (personObject, personToReplace) => {\r\n    return axios.put(`/api/persons/${personToReplace.id}`, personObject)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    addPerson,\r\n    removePerson,\r\n    updateNumber\r\n}","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport Persons from './components/Persons.js';\nimport AddEntry from './components/AddEntry.js';\nimport Filter from './components/Filter.js';\nimport handlePersons from \"./services/persons.js\";\nrequire(\"./styles.css\");\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState(\"\")\n    const [newNumber, setNewNumber] = useState(\"\")\n    const [searchTerms, setSearchTerms] = useState(\"\")\n    const [message, setMessage] = useState(\"\")\n\n    useEffect(() => {\n        handlePersons\n            .getAll()\n            .then(response => {\n                setPersons(response.data)\n            })\n    }, []\n    )\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        if (!newName || !newNumber) {\n\t\t\tsetMessage(\"Empty values are not allowed here.\")\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetMessage(null)\n\t\t\t}, 6000)\n\t\t\treturn\n\t\t}\n\t\tif (persons.some(person => person.number === newNumber)) {\n\t\t\tsetMessage(`${newNumber} already exists. Duplicate numbers are not allowed.`)\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetMessage(null)\n\t\t\t}, 6000)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tconst personObject = {\n            name: newName,\n            number: newNumber,\n            id: Math.floor(Math.random() * 10000)\n        }\n        var duplicate = (persons.some(person => person.name === newName)) ? true : false\n\n        if (duplicate) {\n\t\t\tif (window.confirm(\n                `${newName} already exists.\n                Do you want to replace their number with ${newNumber}?`)\n            ) {\n                const personToReplace = persons.find(person =>\n                    person.name === newName)\n                \n                handlePersons\n                    .updateNumber(personObject, personToReplace)\n                    .then(response => {\n                        setPersons(persons.map(person =>\n                            person.id !== personToReplace.id ? person : response.data)\n                        )\n                    })\n                    .catch(error => {\n                        console.log(error)\n                        setMessage(\n                            `Looks like ${newName} does not exist.\n                            It may have been removed from the database.\n                            Refresh the page to make sure.`\n                        )\n                        setTimeout(() => {\n                            setMessage(null)\n                        }, 10000)\n                    })\n                setMessage(\n                    `Successfully updated ${newName} with ${newNumber}.`\n                )\n                setTimeout(() => {\n                    setMessage(null)\n                }, 6000)\n                setNewName(\"\")\n                setNewNumber(\"\")\n            }\n        } else {\n            handlePersons\n                .addPerson(personObject)\n                .then(response => {\n                    setPersons(persons.concat(response.data))\n\t\t\t\t\tsetMessage(\n\t\t\t\t\t\t`Successfully added a new entry: ${newName}, ${newNumber}.`\n\t\t\t\t\t)\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tsetMessage(null)\n\t\t\t\t\t}, 6000)\n\t\t\t\t\tsetNewName(\"\")\n\t\t\t\t\tsetNewNumber(\"\")\n                })\n\t\t\t\t.catch(error => {\n\t\t\t\t\tsetMessage(\n\t\t\t\t\t\t`Adding the new entry failed - ${error.response.data.error}`\n\t\t\t\t\t)\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tsetMessage(null)\n\t\t\t\t\t}, 10000)\n\t\t\t\t})\n        }\n    }\n\n    const handleNameChange = (event) => {\n        console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        console.log(event.target.value)\n        setNewNumber(event.target.value)\n    }\n\n    const handleSearching = (event) => {\n        console.log(event.target.value)\n        setSearchTerms(event.target.value)\n    }\n\n    const removePerson = (id) => {\n        if (window.confirm(\"Do you really want to remove this entry?\")) {\n            handlePersons\n                .removePerson(id)\n                .then(() => {\n                    setPersons(persons.filter(person => person.id !== id))\n                })\n            setMessage(\n                `Successfully removed ${id} from the phonebook.`\n            )\n            setTimeout(() => {\n                setMessage(null)\n            }, 6000)\n        }\n    }\n\n    const Message = (props) => {\n        const {message} = props\n        if (message === null) {\n            return null\n        }\n\n        return (\n            <div className = \"message\">\n                {message}\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <h1> Names and Numbers </h1>\n            <Filter searchTerms = {searchTerms} handleSearching = {handleSearching} />\n            <Persons\n                persons = {persons}\n                searchTerms = {searchTerms}\n                removePerson = {removePerson} />\n            <Message message = {message} />\n            <h2> Add a new entry here </h2>\n            <AddEntry addPerson = {addPerson} newName = {newName} newNumber = {newNumber}\n                handleName = {handleNameChange} handleNumber = {handleNumberChange} />\n        </div>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}